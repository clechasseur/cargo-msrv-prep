name: CI

on:
  push:
  workflow_dispatch:

env:
  CI: 1

jobs:
  clippy:
    name: Clippy validation${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        all-features: [ false ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust with clippy
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: stable
          components: clippy
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v1-rust
          key: all-features-${{ matrix.all-features }}
          cache-on-failure: true

      - name: Run clippy
        uses: clechasseur/rs-clippy-check@a2a93bdcf05de7909aabd62eca762179ad3dbe50 # v3.0.5
        with:
          args: --workspace --all-targets ${{ matrix.all-features && '--all-features' || '' }} -- -D warnings

  fmt:
    name: Rustfmt check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust nightly with rustfmt
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: nightly
          components: rustfmt
          cache: false

      - name: Run Rustfmt
        uses: clechasseur/rs-fmt-check@1a4ebb722c8e8a04f0d2e363c91744f81c968c42 # v2.0.5
        with:
          args: --all

  msrv-check:
    name: MSRV check for Rust ${{ matrix.toolchain }} on ${{ matrix.os }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.74.1 ]
        os: [ ubuntu, macos, windows ]
        all-features: [ false ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust nightly and ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: nightly,${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v7-rust
          key: all-features-${{ matrix.all-features }}-msrv-pins-files-${{ hashFiles('**/msrv-pins.toml') }}
          cache-on-failure: true

      - name: Install required tools
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just,cargo-hack,cargo-minimal-versions,cargo-msrv,cargo-msrv-prep
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run checks using cargo-minimal-versions
        run: just all_features=${{ matrix.all-features }} check-minimal

  build:
    name: Build for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }} on ${{ matrix.os }}${{ matrix.ignore-lock && ' without Cargo.lock' || '' }}${{ matrix.all-features && ' with all features' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ 1.74.1, stable, beta, nightly ]
        os: [ ubuntu, macos, windows ]
        ignore-lock: [ false, true ]
        all-features: [ false ]
        include:
          - experimental: false
          - toolchain: beta
            experimental: true
          - toolchain: nightly
            experimental: true
        exclude:
          - toolchain: 1.74.1
            ignore-lock: true
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Remove Cargo.lock
        if: ${{ matrix.ignore-lock }}
        run: rm Cargo.lock

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          key: ignore-lock-${{ matrix.ignore-lock }}-all-features-${{ matrix.all-features }}
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run checks
        run: just all_features=${{ matrix.all-features }} check

      - name: Run tests
        run: just all_features=${{ matrix.all-features }} test

  validate-legacy-support:
    # Version 1.0.0 used to work on Rust 1.71.0+ only because of the way `clap-cargo` worked.
    # This job will validate that once built, the resulting binary works on Rust 1.70-
    # (as long as you don't use the default packages option).
    name: Validate pre-1.71 support
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain 1.63.0
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: 1.63.0
          cache: false

      - name: Install Rust stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: stable

      - name: Build and install
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          command: install
          args: --path . --force

      - name: Run with Rust 1.63
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          toolchain: 1.63.0
          command: msrv-prep
          args: --manifest-path ./resources/tests/cargo-msrv-prep/simple_project/Cargo.toml --workspace --dry-run -vvvv

  tarpaulin:
    # Note: there seems to be an issue in `cargo-tarpaulin` when using Rust 1.75.0 or later - it reports some missing line coverage.
    # I've entered an issue: https://github.com/xd009642/tarpaulin/issues/1438
    # In the meantime, let's pin the Rust version used for code coverage to 1.74.1 until we know what's happening.
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: 1.74.1
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: cargo-tarpaulin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run cargo-tarpaulin
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          command: tarpaulin

      - name: Upload code coverage results to codecov.io
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: code-coverage-report
          path: |
            cobertura.xml
            tarpaulin-report.html

  doc:
    name: Rustdoc check for Rust ${{ matrix.toolchain }}${{ matrix.experimental && ' (experimental)' || '' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
        include:
          - experimental: false
          - toolchain: nightly
            experimental: true
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: ${{ matrix.toolchain }}
          cache: false

      - name: Rust Cache
        if: ${{ !matrix.experimental }}
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Install just
        uses: taiki-e/install-action@ae888b48c8777229768754549e5463ba726cb1b3 # v2.44.1
        with:
          tool: just
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate doc using rustdoc
        run: just doc

  publish-dry-run:
    name: Publish dry-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@4d1965c9142484e48d40c19de54b5cba84953a06 # v1.10.0
        with:
          toolchain: stable
          cache: false

      - name: Rust Cache
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          prefix-key: v2-rust
          cache-targets: false
          cache-on-failure: true

      - name: Perform publish dry-run
        uses: clechasseur/rs-cargo@34eb9ee3e4186e5c7820a54393fbf081f78bc102 # v2.0.5
        with:
          command: publish
          args: --dry-run
